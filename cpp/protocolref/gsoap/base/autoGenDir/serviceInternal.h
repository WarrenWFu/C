/* ./autoGenDir/serviceInternal.h
   Generated by wsdl2h 2.8.43 from qhjkdsf.wsdl and typemap.dat
   2017-03-01 02:05:47 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on ./autoGenDir/serviceInternal.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stl.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://www.ylink.com.cn/qhjkdsf.wsdl                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/

#import "stl.h"	// enable STL containers when used (option -s removes STL dependency)

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

qhjkdsf = "http://www.ylink.com.cn/qhjkdsf.wsdl"

*/

#define SOAP_NAMESPACE_OF_qhjkdsf	"http://www.ylink.com.cn/qhjkdsf.wsdl"
//gsoap qhjkdsf schema namespace:	http://www.ylink.com.cn/qhjkdsf.wsdl
//gsoap qhjkdsf schema form:	qualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Primitive built-in type "xs:BodyEncrypt".
typedef std::string xsd__BodyEncrypt;

/// Primitive built-in type "xs:BodyZip".
typedef std::string xsd__BodyZip;

/// Primitive built-in type "xs:GatewayVersion".
typedef std::string xsd__GatewayVersion;

/// Primitive built-in type "xs:Max127Text".
typedef std::string xsd__Max127Text;

/// Primitive built-in type "xs:Max14NumericText".
typedef std::string xsd__Max14NumericText;

/// Primitive built-in type "xs:Max20Text".
typedef std::string xsd__Max20Text;

/// Primitive built-in type "xs:MsgBody".
typedef std::string xsd__MsgBody;

/// Primitive built-in type "xs:Resptype".
typedef std::string xsd__Resptype;

/// Primitive built-in type "xs:ReturnEncrypt".
typedef std::string xsd__ReturnEncrypt;

/// Primitive built-in type "xs:SendTime".
typedef std::string xsd__SendTime;

/// Primitive built-in type "xs:Signature".
typedef std::string xsd__Signature;

/// Primitive built-in type "xs:Version".
typedef std::string xsd__Version;

/// Primitive built-in type "xs:ZipType".
typedef std::string xsd__ZipType;

/// Primitive built-in type "xs:decimal".
typedef std::string xsd__decimal;


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class qhjkdsf__requestBody.
class qhjkdsf__requestBody;

//  Forward declaration of class qhjkdsf__responseBody.
class qhjkdsf__responseBody;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.ylink.com.cn/qhjkdsf.wsdl                                     *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.ylink.com.cn/qhjkdsf.wsdl":Max20Text is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 1 to 20.
typedef std::string qhjkdsf__Max20Text 1 : 20;

/// @brief "http://www.ylink.com.cn/qhjkdsf.wsdl":Version is a simpleType restriction of XSD type xs:decimal.
///
/// Number of total digits is 10.
/// Value range is 1.0 (exclusive) to 99.9 (exclusive).
typedef xsd__decimal qhjkdsf__Version;

/// @brief "http://www.ylink.com.cn/qhjkdsf.wsdl":SendTime is a simpleType restriction of XSD type xs:dateTime.
///
typedef time_t qhjkdsf__SendTime;

/// @brief "http://www.ylink.com.cn/qhjkdsf.wsdl":Max14NumericText is a simpleType restriction of XSD type xs:string.
///
typedef std::string qhjkdsf__Max14NumericText;

/// @brief "http://www.ylink.com.cn/qhjkdsf.wsdl":Resptype is a simpleType restriction of XSD type xs:string.
///
typedef std::string qhjkdsf__Resptype;

/// @brief "http://www.ylink.com.cn/qhjkdsf.wsdl":ZipType is a simpleType restriction of XSD type xs:string.
///
typedef std::string qhjkdsf__ZipType;

/// @brief "http://www.ylink.com.cn/qhjkdsf.wsdl":ReturnEncrypt is a simpleType restriction of XSD type xs:string.
///
typedef std::string qhjkdsf__ReturnEncrypt;

/// @brief "http://www.ylink.com.cn/qhjkdsf.wsdl":GatewayVersion is a simpleType restriction of XSD type xs:string.
///
typedef std::string qhjkdsf__GatewayVersion;

/// @brief "http://www.ylink.com.cn/qhjkdsf.wsdl":Max127Text is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 1 to 127.
typedef std::string qhjkdsf__Max127Text 1 : 127;

/// @brief "http://www.ylink.com.cn/qhjkdsf.wsdl":BodyZip is a simpleType restriction of XSD type xs:string.
///
typedef std::string qhjkdsf__BodyZip;

/// @brief "http://www.ylink.com.cn/qhjkdsf.wsdl":BodyEncrypt is a simpleType restriction of XSD type xs:string.
///
typedef std::string qhjkdsf__BodyEncrypt;

/// @brief "http://www.ylink.com.cn/qhjkdsf.wsdl":Signature is a simpleType restriction of XSD type xs:string.
///
typedef std::string qhjkdsf__Signature;

/// @brief "http://www.ylink.com.cn/qhjkdsf.wsdl":MsgBody is a simpleType restriction of XSD type xs:string.
///
typedef std::string qhjkdsf__MsgBody;


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.ylink.com.cn/qhjkdsf.wsdl                                     *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.ylink.com.cn/qhjkdsf.wsdl":requestBody is a complexType.
///
/// class qhjkdsf__requestBody operations:
/// - qhjkdsf__requestBody* soap_new_qhjkdsf__requestBody(soap*) allocate and default initialize
/// - qhjkdsf__requestBody* soap_new_qhjkdsf__requestBody(soap*, int num) allocate array and default initialize values
/// - qhjkdsf__requestBody* soap_new_req_qhjkdsf__requestBody(soap*, ...) allocate, set required members
/// - qhjkdsf__requestBody* soap_new_set_qhjkdsf__requestBody(soap*, ...) allocate, set all public members
/// - qhjkdsf__requestBody::soap_default(soap*) default initialize members
/// - int soap_read_qhjkdsf__requestBody(soap*, qhjkdsf__requestBody*) deserialize from a stream
/// - int soap_write_qhjkdsf__requestBody(soap*, qhjkdsf__requestBody*) serialize to a stream
/// - qhjkdsf__requestBody* qhjkdsf__requestBody::soap_dup(soap*) returns deep copy of qhjkdsf__requestBody, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - qhjkdsf__requestBody::soap_del() deep deletes qhjkdsf__requestBody data members, use only after qhjkdsf__requestBody::soap_dup(NULL) (use soapcpp2 -Ed)
class qhjkdsf__requestBody
{ public:

/// </BLOCKQUOTE></PRE>
/// Element "msgtype" of XSD type xs:Max20Text.
    xsd__Max20Text                       msgtype                        1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "version" of XSD type xs:Version.
    xsd__Version                         version                        1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "subnode" of XSD type xs:string.
    std::string                          subnode                        1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "sendtime" of XSD type xs:SendTime.
    xsd__SendTime                        sendtime                       1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "msgno" of XSD type xs:Max14NumericText.
    xsd__Max14NumericText                msgno                          1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "resptype" of XSD type xs:Resptype.
    xsd__Resptype                        resptype                       1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "ziptype" of XSD type xs:ZipType.
    xsd__ZipType                         ziptype                        1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "returnencrypt" of XSD type xs:ReturnEncrypt.
    xsd__ReturnEncrypt*                  returnencrypt                  0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "gatewayversion" of XSD type xs:GatewayVersion.
    xsd__GatewayVersion                  gatewayversion                 1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "respurl" of XSD type xs:Max127Text.
    xsd__Max127Text*                     respurl                        0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "signature" of XSD type xs:Signature.
    xsd__Signature                       signature                      1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "msgbody" of XSD type xs:MsgBody.
    xsd__MsgBody                         msgbody                        1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.ylink.com.cn/qhjkdsf.wsdl":responseBody is a complexType.
///
/// class qhjkdsf__responseBody operations:
/// - qhjkdsf__responseBody* soap_new_qhjkdsf__responseBody(soap*) allocate and default initialize
/// - qhjkdsf__responseBody* soap_new_qhjkdsf__responseBody(soap*, int num) allocate array and default initialize values
/// - qhjkdsf__responseBody* soap_new_req_qhjkdsf__responseBody(soap*, ...) allocate, set required members
/// - qhjkdsf__responseBody* soap_new_set_qhjkdsf__responseBody(soap*, ...) allocate, set all public members
/// - qhjkdsf__responseBody::soap_default(soap*) default initialize members
/// - int soap_read_qhjkdsf__responseBody(soap*, qhjkdsf__responseBody*) deserialize from a stream
/// - int soap_write_qhjkdsf__responseBody(soap*, qhjkdsf__responseBody*) serialize to a stream
/// - qhjkdsf__responseBody* qhjkdsf__responseBody::soap_dup(soap*) returns deep copy of qhjkdsf__responseBody, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - qhjkdsf__responseBody::soap_del() deep deletes qhjkdsf__responseBody data members, use only after qhjkdsf__responseBody::soap_dup(NULL) (use soapcpp2 -Ed)
class qhjkdsf__responseBody
{ public:

/// </BLOCKQUOTE></PRE>
/// Element "bodyzip" of XSD type xs:BodyZip.
    xsd__BodyZip                         bodyzip                        1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "bodyencrypt" of XSD type xs:BodyEncrypt.
    xsd__BodyEncrypt                     bodyencrypt                    1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "signature" of XSD type xs:Signature.
    xsd__Signature                       signature                      1;	///< Required element.

/// </BLOCKQUOTE></PRE>
/// Element "msgbody" of XSD type xs:MsgBody.
    xsd__MsgBody                         msgbody                        1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.ylink.com.cn/qhjkdsf.wsdl                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.ylink.com.cn/qhjkdsf.wsdl                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap qhjkdsf service name:	qhjkWSBindSOAP 
//gsoap qhjkdsf service type:	QhjkWSPort 
//gsoap qhjkdsf service port:	http://localhost:80 
//gsoap qhjkdsf service namespace:	http://www.ylink.com.cn/qhjkdsf.wsdl 
//gsoap qhjkdsf service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref qhjkWSBindSOAP

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page qhjkWSBindSOAP Binding "qhjkWSBindSOAP"

@section qhjkWSBindSOAP_service Service Documentation "qhjkWSBindSOAP"


@section qhjkWSBindSOAP_operations Operations of Binding "qhjkWSBindSOAP"

  - @ref __qhjkdsf__dsf

@section qhjkWSBindSOAP_ports Default endpoints of Binding "qhjkWSBindSOAP"

  - http://localhost:80

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   qhjkWSBindSOAP                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __qhjkdsf__dsf                                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__qhjkdsf__dsf" of service binding "qhjkWSBindSOAP".


  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:80

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___qhjkdsf__dsf(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    qhjkdsf__requestBody*               reqBody,
    // output parameters:
    qhjkdsf__responseBody              &rspBody
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __qhjkdsf__dsf(
    struct soap *soap,
    // input parameters:
    qhjkdsf__requestBody*               reqBody,
    // output parameters:
    qhjkdsf__responseBody              &rspBody
  );
@endcode

C++ proxy class (defined in soapqhjkWSBindSOAPProxy.h generated with soapcpp2):
@code
  class qhjkWSBindSOAPProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapqhjkWSBindSOAPService.h generated with soapcpp2):
@code
  class qhjkWSBindSOAPService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap qhjkdsf service method-protocol:	dsf SOAP
//gsoap qhjkdsf service method-style:	dsf document
//gsoap qhjkdsf service method-encoding:	dsf literal
//gsoap qhjkdsf service method-action:	dsf ""
//gsoap qhjkdsf service method-output-action:	dsf Response
int __qhjkdsf__dsf(
    qhjkdsf__requestBody*               reqBody,	///< Input parameter
    qhjkdsf__responseBody              &rspBody	///< Output parameter
);

/**

@page qhjkWSBindSOAP Binding "qhjkWSBindSOAP"

@section qhjkWSBindSOAP_policy_enablers Policy Enablers of Binding "qhjkWSBindSOAP"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section qhjkdsf Top-level root elements of schema "http://www.ylink.com.cn/qhjkdsf.wsdl"

*/

/* End of ./autoGenDir/serviceInternal.h */
