/* soapqhjkWSBindSOAPService.cpp
   Generated by gSOAP 2.8.43 for autoGenDir/serviceInternal.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapqhjkWSBindSOAPService.h"

qhjkWSBindSOAPService::qhjkWSBindSOAPService()
{	this->soap = soap_new();
	this->soap_own = true;
	qhjkWSBindSOAPService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

qhjkWSBindSOAPService::qhjkWSBindSOAPService(const qhjkWSBindSOAPService& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
}

qhjkWSBindSOAPService::qhjkWSBindSOAPService(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	qhjkWSBindSOAPService_init(_soap->imode, _soap->omode);
}

qhjkWSBindSOAPService::qhjkWSBindSOAPService(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	qhjkWSBindSOAPService_init(iomode, iomode);
}

qhjkWSBindSOAPService::qhjkWSBindSOAPService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	qhjkWSBindSOAPService_init(imode, omode);
}

qhjkWSBindSOAPService::~qhjkWSBindSOAPService()
{	if (this->soap_own)
		soap_free(this->soap);
}

void qhjkWSBindSOAPService::qhjkWSBindSOAPService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
        {"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"qhjkdsf", "http://www.ylink.com.cn/qhjkdsf.wsdl", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

void qhjkWSBindSOAPService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void qhjkWSBindSOAPService::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	qhjkWSBindSOAPService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
qhjkWSBindSOAPService *qhjkWSBindSOAPService::copy()
{	qhjkWSBindSOAPService *dup = SOAP_NEW_COPY(qhjkWSBindSOAPService);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

qhjkWSBindSOAPService& qhjkWSBindSOAPService::operator=(const qhjkWSBindSOAPService& rhs)
{	if (this->soap_own)
		soap_free(this->soap);
	this->soap = rhs.soap;
	this->soap_own = false;
	return *this;
}

int qhjkWSBindSOAPService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int qhjkWSBindSOAPService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int qhjkWSBindSOAPService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int qhjkWSBindSOAPService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int qhjkWSBindSOAPService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int qhjkWSBindSOAPService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void qhjkWSBindSOAPService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void qhjkWSBindSOAPService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *qhjkWSBindSOAPService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void qhjkWSBindSOAPService::soap_noheader()
{	this->soap->header = NULL;
}

::SOAP_ENV__Header *qhjkWSBindSOAPService::soap_header()
{	return this->soap->header;
}

#ifndef WITH_NOIO
int qhjkWSBindSOAPService::run(int port)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int qhjkWSBindSOAPService::ssl_run(int port)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->ssl_accept() || this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}
#endif

SOAP_SOCKET qhjkWSBindSOAPService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET qhjkWSBindSOAPService::accept()
{	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int qhjkWSBindSOAPService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif
#endif

int qhjkWSBindSOAPService::serve()
{
#ifndef WITH_FASTCGI
	this->soap->keep_alive = this->soap->max_keep_alive + 1;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (this->soap->keep_alive > 0 && this->soap->max_keep_alive > 0)
			this->soap->keep_alive--;
#endif
		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if ((dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap))) && this->soap->error && this->soap->error < SOAP_STOP)
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}
#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___qhjkdsf__dsf(struct soap*, qhjkWSBindSOAPService*);

int qhjkWSBindSOAPService::dispatch()
{	return dispatch(this->soap);
}

int qhjkWSBindSOAPService::dispatch(struct soap* soap)
{
	qhjkWSBindSOAPService_init(soap->imode, soap->omode);

	soap->mode |= SOAP_XML_STRICT;
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "reqBody"))
		return serve___qhjkdsf__dsf(soap, this);
	return soap->error = SOAP_NO_METHOD;
}

static int serve___qhjkdsf__dsf(struct soap *soap, qhjkWSBindSOAPService *service)
{	struct __qhjkdsf__dsf soap_tmp___qhjkdsf__dsf;
	qhjkdsf__responseBody rspBody;
	rspBody.soap_default(soap);
	soap_default___qhjkdsf__dsf(soap, &soap_tmp___qhjkdsf__dsf);
	if (!soap_get___qhjkdsf__dsf(soap, &soap_tmp___qhjkdsf__dsf, "-qhjkdsf:dsf", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->dsf(soap_tmp___qhjkdsf__dsf.reqBody, rspBody);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	rspBody.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || rspBody.soap_put(soap, "qhjkdsf:responseBody", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || rspBody.soap_put(soap, "qhjkdsf:responseBody", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
